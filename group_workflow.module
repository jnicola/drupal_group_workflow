<?php
/**
 * @file
 * Module contianing hooks and basic helper functions for Group Workflow.
 */

use Drupal\group\Entity\GroupContentType;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * PURPOSE: For node edit forms, remove workflow fields if related to group
 * and user lacks appropriate group permissions.
 */
function group_workflow_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Check is user can bypass group access controls, in which case skip.
  $user = \Drupal::currentUser();
  if ($user->hasPermission('bypass group access')) {
    return;
  }

  // Determine if this content type is even managed by groups at all.
  $groupPluginManager = \Drupal::service('plugin.manager.group_content_enabler');
  $plugin_id = 'group_node:' . $form_state->getFormObject()->getEntity()->bundle();
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);

  // Do nothing if this content type is unrelated to groups.
  if (empty($group_content_types)) {
    return;
  }

  // Check if a workflow transition field exists at all on this node.
  if (!_group_workflow_find_workflow_transition_parent_key_exists($form, 'workflow_transition')) {
    return;
  }

  // Check whether the item is new or not by trying to load NID.
  if ($nid = $form_state->getFormObject()->getEntity()->id()) {

    // Load all the group content for this node.
    $group_contents = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->loadByProperties([
        'type' => array_keys($group_content_types),
        'entity_id' => $nid,
      ]);

    // Don't bother if there are no groups returned.
    if (empty($group_contents)) {
      return;
    }

    // Load all groups specifically.
    $groups = [];
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $groups[$group->id()] = $group;
    }

  }
  else {
    // Get Group from the current URL, return if no param.
    $current_uri = \Drupal::service('path.current')->getPath();
    if (strpos($current_uri, 'create/group_node') == -1) {
      return;
    }

    $current_uri = explode('/', $current_uri);
    $current_group = intval($current_uri[2]);

    $groups = [];
    $groups = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->loadByProperties([
        'id' => intval($current_group),
      ]);
  }

  // If there is no group despite a param, exit.
  if (empty($groups)) {
    return;
  }

  // Check if user has permission for all groups.
  $account = Drupal::currentUser();
  $permission_pass = NULL;

  foreach ($groups as $group) {
    if ($group->hasPermission('access group_node workflow', $account)) {
      $permission_pass = TRUE;
    }
    else {
      $permission_pass = FALSE;
    }
  }

  // Hide workflow container if user doesn't have group perms in all groups.
  if (!$permission_pass) {
    foreach ($form as &$array_item) {
      if (is_array($array_item)
        && isset($array_item['#type'])
        && $array_item['#type'] == 'container'
        && isset($array_item['widget'][0]['workflow_transition'])
      ) {
        $array_item['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Helper function to find if a key exists.
 *
 * @param array $array
 *   An array to recurse through.
 * @param string $keySearch
 *   A value to search for.
 *
 * @return bool
 *   Returns TRUE if value exists, FALSE if not.
 */
function _group_workflow_find_workflow_transition_parent_key_exists(array $array, $keySearch) {
  foreach ($array as $key => $item) {
    if ($key == $keySearch) {
      return TRUE;
    }
    else {
      if (is_array($item)
        && _group_workflow_find_workflow_transition_parent_key_exists(
          $item, $keySearch)
      ) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
