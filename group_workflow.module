<?php

/**
 * @FILE:
 */

use Drupal\group\Entity\GroupContentType;
use Drupal\Core\Session\AccountInterface;

//function group_workflow_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context){
//
//  return;
//  // Make sure that we're dealing with a workflow element.
//  if(isset($element['#title']) && is_string($element['#title']) && $element['#title'] == 'Workflow'){
//
//    // Determine if this content type is even managed by groups at all.
//    $groupPluginManager = \Drupal::service('plugin.manager.group_content_enabler');
//    $plugin_id = 'group_node:' . $form_state->getFormObject()->getEntity()->bundle();
//    $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
//
//    // Do nothing if this content type is unrelated to groups.
//    if (empty($group_content_types)) {
//      dpm('No group content types detected.');
//      return;
//    }
//
//    // Check whether the item is new or not by trying to load NID.
//    if ($nid = $form_state->getFormObject()->getEntity()->id()) {
//      // Load all the group content for this node.
//      $group_contents = \Drupal::entityTypeManager()
//        ->getStorage('group_content')
//        ->loadByProperties([
//          'type' => array_keys($group_content_types),
//          'entity_id' => $nid,
//        ]);
//
//      // If the node does not belong to any group, we have nothing to say.
//      if (empty($group_contents)) {
//        dpm('Node is not in a group.');
//        return;
//      }
//
//      dpm('Entity is in a group!');
//
//      $groups = [];
//      foreach ($group_contents as $group_content) {
//        /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
//        $group = $group_content->getGroup();
//        $groups[$group->id()] = $group;
//      }
//
//      // Check if user has permission for all groups.
//      $account = Drupal::currentUser();
//      $permission_pass = NULL;
//
//      foreach($groups as $group) {
//        if ($group->hasPermission('access group_node workflow', $account)) {
//          $permission_pass = TRUE;
//        }
//        else {
//          $permission_pass = FALSE;
//        }
//      }
//
//      // @TODO: Remove this test configuration.
//      $permission_pass = FALSE;
//
//      if (!$permission_pass) {
//        // @TODO: Hide the workflow form entirely.
//        $element['#disabled'] = TRUE;
//      }
//      dpm($element);
//    }
//    else {
//      dpm('NEW node!');
//    }
//  }
//}

/**
 * @TODO: Document.
 *
 * PURPOSE: Modify node forms so as any workflow fields are hidden if user does
 * not possess group permission to alter the field
 */
function group_workflow_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  // Determine if this content type is even managed by groups at all.
  $groupPluginManager = \Drupal::service('plugin.manager.group_content_enabler');
  $plugin_id = 'group_node:' . $form_state->getFormObject()->getEntity()->bundle();
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);

  // Do nothing if this content type is unrelated to groups.
  if (empty($group_content_types)) {
    return;
  }

  // Check if a workflow transition field exists at all on this node.
  if (!_group_workflow_find_workflow_transition_parent_key_exists($form, 'workflow_transition')) {
    return;
  }

  // Check whether the item is new or not by trying to load NID.
  if ($nid = $form_state->getFormObject()->getEntity()->id()) {
    // Load all the group content for this node.
    $group_contents = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->loadByProperties([
        'type' => array_keys($group_content_types),
        'entity_id' => $nid,
      ]);
  }
  else {
    $current_uri = \Drupal::service('path.current')->getPath();
    // See if we have a group URL.
    if(strpos($current_uri, 'create/group_node') == -1) {
      return;
    }
      $current_uri = explode('/', $current_uri);
      $current_group = $current_uri[2];

      // @TODO: Verify this logic... Used above identically but uses NID?
      $group_contents = \Drupal::entityTypeManager()
        ->getStorage('group_content')
        ->loadByProperties([
          'type' => array_keys($group_content_types),
          'entity_id' => $current_group,
        ]);
      return;
    }

    // If the node does not belong to any group, we have nothing to say.
    if (empty($group_contents)) {
      return;
  }

    // Load all groups specifically.
    $groups = [];
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $groups[$group->id()] = $group;
    }

    // Check if user has permission for all groups.
    $account = Drupal::currentUser();
    $permission_pass = NULL;

    foreach($groups as $group) {
      if ($group->hasPermission('access group_node workflow', $account)) {
        $permission_pass = TRUE;
      }
      else {
        $permission_pass = FALSE;
      }
    }

    // Hide fields if the user does not have permission to view fields.
    if(!$permission_pass){
      dpm('HIDE FIELDS!');
    }

  //unset($form['field_workflow']);
}

/**
 * Helper function to find if a key exists.
 */
function _group_workflow_find_workflow_transition_parent_key_exists($array, $keySearch)
{
  foreach ($array as $key => $item) {
    if ($key == $keySearch) {
      return TRUE;
    }
    else {
      if (is_array($item)
        && _group_workflow_find_workflow_transition_parent_key_exists(
          $item, $keySearch)
      ){
        return TRUE;
      }
    }
  }
}